plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm'
    id 'maven-publish'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

dependencies {
    implementation 'org.ow2.asm:asm:9.3'
    implementation 'org.ow2.asm:asm-commons:9.3'
    implementation 'org.ow2.asm:asm-analysis:9.3'
    implementation 'org.ow2.asm:asm-util:9.3'
    implementation 'org.ow2.asm:asm-tree:9.3'
    compileOnly "com.android.tools.build:gradle:4.0.2"
    compileOnly gradleApi()
}
task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // 添加以下配置可以自动从编译容器中获取release版本内容（使用debug可以获取debug版本内容），并生成pom文件
                // 注意：发布物声明必须在 afterEvaluate 内部，因为 components 在 afterEvaluate 阶段才生成完成
//                from components.release
                groupId 'com.antway.android' // groupId
                artifactId 'api' // artifactId
                version '1.0.0' // 发布版本
                artifact sourceJar
                artifact javadocJar
                artifact jar
                pom {
                    packaging 'jar'
                    name = 'This is a api lib v1.0.0'
                    description = 'This is a api lib v1.0.0'
                    url = 'This is a api lib v1.0.0'
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'antway'
                            name = 'antway'
                            email = 'andoter@gmail.com'
                        }
                    }
                    scm {
                        connection = 'https://github.com/dengshiwei/gradle-api-learning'
                        developerConnection = 'https://github.com/dengshiwei/gradle-api-learning.git'
                        url = 'https://github.com/dengshiwei/gradle-api-learning'
                    }
                    pom.withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        project.configurations.all { configuration ->
                            def name = configuration.name
                            if (name == 'implementation' || name == 'releaseImplementation') {
                                configuration.allDependencies.each {
                                    if (it.group != null && it.name != "unspecified" && it.version != null) {
                                        def groupId = it.group
                                        def artifactId = it.name
                                        def version = it.version
                                        if (it instanceof ProjectDependency) {
                                            def properties = it.getDependencyProject().getProperties()
                                            groupId = properties.get("GROUP")
                                            artifactId = properties.get("POM_ARTIFACT_ID")
                                        }
                                        println "dependency:" + groupId + ":" + artifactId + ":" + version
                                        def dependencyNode = dependenciesNode.appendNode('dependency')
                                        dependencyNode.appendNode('groupId', groupId)
                                        dependencyNode.appendNode('artifactId', artifactId)
                                        dependencyNode.appendNode('version', version)
                                        dependencyNode.appendNode('scope', 'compile')
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        // 配置远程仓库
        repositories {
            maven {
                url ='../repo'
            }
        }
    }
}